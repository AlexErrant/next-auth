"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "../../../packages/next-auth/client/_utils.js":
/*!****************************************************!*\
  !*** ../../../packages/next-auth/client/_utils.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BroadcastChannel = exports.now = exports.apiBaseUrl = exports.fetchData = void 0;\n/**\n * If passed 'appContext' via getInitialProps() in _app.js\n * then get the req object from ctx and use that for the\n * req value to allow `fetchData` to\n * work seemlessly in getInitialProps() on server side\n * pages *and* in _app.js.\n */\nasync function fetchData(path, __NEXTAUTH, logger, { ctx, req = ctx === null || ctx === void 0 ? void 0 : ctx.req } = {}) {\n    const url = `${apiBaseUrl(__NEXTAUTH)}/${path}`;\n    try {\n        const options = (req === null || req === void 0 ? void 0 : req.headers.cookie)\n            ? { headers: { cookie: req.headers.cookie } }\n            : {};\n        const res = await fetch(url, options);\n        const data = await res.json();\n        if (!res.ok)\n            throw data;\n        return Object.keys(data).length > 0 ? data : null; // Return null if data empty\n    }\n    catch (error) {\n        logger.error(\"CLIENT_FETCH_ERROR\", { error: error, url });\n        return null;\n    }\n}\nexports.fetchData = fetchData;\nfunction apiBaseUrl(__NEXTAUTH) {\n    if (typeof window === \"undefined\") {\n        // Return absolute path when called server side\n        return `${__NEXTAUTH.baseUrlServer}${__NEXTAUTH.basePathServer}`;\n    }\n    // Return relative path when called client side\n    return __NEXTAUTH.basePath;\n}\nexports.apiBaseUrl = apiBaseUrl;\n/** Returns the number of seconds elapsed since January 1, 1970 00:00:00 UTC. */\nfunction now() {\n    return Math.floor(Date.now() / 1000);\n}\nexports.now = now;\n/**\n * Inspired by [Broadcast Channel API](https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API)\n * Only not using it directly, because Safari does not support it.\n *\n * https://caniuse.com/?search=broadcastchannel\n */\nfunction BroadcastChannel(name = \"nextauth.message\") {\n    return {\n        /** Get notified by other tabs/windows. */\n        receive(onReceive) {\n            const handler = (event) => {\n                var _a;\n                if (event.key !== name)\n                    return;\n                const message = JSON.parse((_a = event.newValue) !== null && _a !== void 0 ? _a : \"{}\");\n                if ((message === null || message === void 0 ? void 0 : message.event) !== \"session\" || !(message === null || message === void 0 ? void 0 : message.data))\n                    return;\n                onReceive(message);\n            };\n            window.addEventListener(\"storage\", handler);\n            return () => window.removeEventListener(\"storage\", handler);\n        },\n        /** Notify other tabs/windows. */\n        post(message) {\n            if (typeof window === \"undefined\")\n                return;\n            try {\n                localStorage.setItem(name, JSON.stringify({ ...message, timestamp: now() }));\n            }\n            catch {\n                /**\n                 * The localStorage API isn't always available.\n                 * It won't work in private mode prior to Safari 11 for example.\n                 * Notifications are simply dropped if an error is encountered.\n                 */\n            }\n        },\n    };\n}\nexports.BroadcastChannel = BroadcastChannel;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vcGFja2FnZXMvbmV4dC1hdXRoL2NsaWVudC9fdXRpbHMuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsd0JBQXdCLEdBQUcsV0FBVyxHQUFHLGtCQUFrQixHQUFHLGlCQUFpQjtBQUMvRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRCwrREFBK0QsSUFBSTtBQUN4SCxtQkFBbUIsdUJBQXVCLEdBQUcsS0FBSztBQUNsRDtBQUNBO0FBQ0EsZ0JBQWdCLFdBQVc7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRDtBQUMzRDtBQUNBO0FBQ0EsNkNBQTZDLG1CQUFtQjtBQUNoRTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHlCQUF5QixFQUFFLDBCQUEwQjtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUdBQXFHO0FBQ3JHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTRELDhCQUE4QjtBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSx3QkFBd0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uL3BhY2thZ2VzL25leHQtYXV0aC9jbGllbnQvX3V0aWxzLmpzPzdlMWMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJyb2FkY2FzdENoYW5uZWwgPSBleHBvcnRzLm5vdyA9IGV4cG9ydHMuYXBpQmFzZVVybCA9IGV4cG9ydHMuZmV0Y2hEYXRhID0gdm9pZCAwO1xuLyoqXG4gKiBJZiBwYXNzZWQgJ2FwcENvbnRleHQnIHZpYSBnZXRJbml0aWFsUHJvcHMoKSBpbiBfYXBwLmpzXG4gKiB0aGVuIGdldCB0aGUgcmVxIG9iamVjdCBmcm9tIGN0eCBhbmQgdXNlIHRoYXQgZm9yIHRoZVxuICogcmVxIHZhbHVlIHRvIGFsbG93IGBmZXRjaERhdGFgIHRvXG4gKiB3b3JrIHNlZW1sZXNzbHkgaW4gZ2V0SW5pdGlhbFByb3BzKCkgb24gc2VydmVyIHNpZGVcbiAqIHBhZ2VzICphbmQqIGluIF9hcHAuanMuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGZldGNoRGF0YShwYXRoLCBfX05FWFRBVVRILCBsb2dnZXIsIHsgY3R4LCByZXEgPSBjdHggPT09IG51bGwgfHwgY3R4ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjdHgucmVxIH0gPSB7fSkge1xuICAgIGNvbnN0IHVybCA9IGAke2FwaUJhc2VVcmwoX19ORVhUQVVUSCl9LyR7cGF0aH1gO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSAocmVxID09PSBudWxsIHx8IHJlcSA9PT0gdm9pZCAwID8gdm9pZCAwIDogcmVxLmhlYWRlcnMuY29va2llKVxuICAgICAgICAgICAgPyB7IGhlYWRlcnM6IHsgY29va2llOiByZXEuaGVhZGVycy5jb29raWUgfSB9XG4gICAgICAgICAgICA6IHt9O1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaCh1cmwsIG9wdGlvbnMpO1xuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICAgICAgaWYgKCFyZXMub2spXG4gICAgICAgICAgICB0aHJvdyBkYXRhO1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMoZGF0YSkubGVuZ3RoID4gMCA/IGRhdGEgOiBudWxsOyAvLyBSZXR1cm4gbnVsbCBpZiBkYXRhIGVtcHR5XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBsb2dnZXIuZXJyb3IoXCJDTElFTlRfRkVUQ0hfRVJST1JcIiwgeyBlcnJvcjogZXJyb3IsIHVybCB9KTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuZXhwb3J0cy5mZXRjaERhdGEgPSBmZXRjaERhdGE7XG5mdW5jdGlvbiBhcGlCYXNlVXJsKF9fTkVYVEFVVEgpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAvLyBSZXR1cm4gYWJzb2x1dGUgcGF0aCB3aGVuIGNhbGxlZCBzZXJ2ZXIgc2lkZVxuICAgICAgICByZXR1cm4gYCR7X19ORVhUQVVUSC5iYXNlVXJsU2VydmVyfSR7X19ORVhUQVVUSC5iYXNlUGF0aFNlcnZlcn1gO1xuICAgIH1cbiAgICAvLyBSZXR1cm4gcmVsYXRpdmUgcGF0aCB3aGVuIGNhbGxlZCBjbGllbnQgc2lkZVxuICAgIHJldHVybiBfX05FWFRBVVRILmJhc2VQYXRoO1xufVxuZXhwb3J0cy5hcGlCYXNlVXJsID0gYXBpQmFzZVVybDtcbi8qKiBSZXR1cm5zIHRoZSBudW1iZXIgb2Ygc2Vjb25kcyBlbGFwc2VkIHNpbmNlIEphbnVhcnkgMSwgMTk3MCAwMDowMDowMCBVVEMuICovXG5mdW5jdGlvbiBub3coKSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApO1xufVxuZXhwb3J0cy5ub3cgPSBub3c7XG4vKipcbiAqIEluc3BpcmVkIGJ5IFtCcm9hZGNhc3QgQ2hhbm5lbCBBUEldKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9Ccm9hZGNhc3RfQ2hhbm5lbF9BUEkpXG4gKiBPbmx5IG5vdCB1c2luZyBpdCBkaXJlY3RseSwgYmVjYXVzZSBTYWZhcmkgZG9lcyBub3Qgc3VwcG9ydCBpdC5cbiAqXG4gKiBodHRwczovL2Nhbml1c2UuY29tLz9zZWFyY2g9YnJvYWRjYXN0Y2hhbm5lbFxuICovXG5mdW5jdGlvbiBCcm9hZGNhc3RDaGFubmVsKG5hbWUgPSBcIm5leHRhdXRoLm1lc3NhZ2VcIikge1xuICAgIHJldHVybiB7XG4gICAgICAgIC8qKiBHZXQgbm90aWZpZWQgYnkgb3RoZXIgdGFicy93aW5kb3dzLiAqL1xuICAgICAgICByZWNlaXZlKG9uUmVjZWl2ZSkge1xuICAgICAgICAgICAgY29uc3QgaGFuZGxlciA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQua2V5ICE9PSBuYW1lKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IEpTT04ucGFyc2UoKF9hID0gZXZlbnQubmV3VmFsdWUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFwie31cIik7XG4gICAgICAgICAgICAgICAgaWYgKChtZXNzYWdlID09PSBudWxsIHx8IG1lc3NhZ2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG1lc3NhZ2UuZXZlbnQpICE9PSBcInNlc3Npb25cIiB8fCAhKG1lc3NhZ2UgPT09IG51bGwgfHwgbWVzc2FnZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogbWVzc2FnZS5kYXRhKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIG9uUmVjZWl2ZShtZXNzYWdlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInN0b3JhZ2VcIiwgaGFuZGxlcik7XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4gd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzdG9yYWdlXCIsIGhhbmRsZXIpO1xuICAgICAgICB9LFxuICAgICAgICAvKiogTm90aWZ5IG90aGVyIHRhYnMvd2luZG93cy4gKi9cbiAgICAgICAgcG9zdChtZXNzYWdlKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKG5hbWUsIEpTT04uc3RyaW5naWZ5KHsgLi4ubWVzc2FnZSwgdGltZXN0YW1wOiBub3coKSB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogVGhlIGxvY2FsU3RvcmFnZSBBUEkgaXNuJ3QgYWx3YXlzIGF2YWlsYWJsZS5cbiAgICAgICAgICAgICAgICAgKiBJdCB3b24ndCB3b3JrIGluIHByaXZhdGUgbW9kZSBwcmlvciB0byBTYWZhcmkgMTEgZm9yIGV4YW1wbGUuXG4gICAgICAgICAgICAgICAgICogTm90aWZpY2F0aW9ucyBhcmUgc2ltcGx5IGRyb3BwZWQgaWYgYW4gZXJyb3IgaXMgZW5jb3VudGVyZWQuXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmV4cG9ydHMuQnJvYWRjYXN0Q2hhbm5lbCA9IEJyb2FkY2FzdENoYW5uZWw7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../../packages/next-auth/client/_utils.js\n"));

/***/ }),

/***/ "../../../packages/next-auth/core/errors.js":
/*!**************************************************!*\
  !*** ../../../packages/next-auth/core/errors.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.adapterErrorHandler = exports.eventsErrorHandler = exports.capitalize = exports.upperSnake = exports.UntrustedHost = exports.UnknownAction = exports.InvalidCallbackUrl = exports.UnsupportedStrategy = exports.MissingAdapterMethods = exports.MissingAdapter = exports.MissingAuthorize = exports.MissingSecret = exports.MissingAPIRoute = exports.AccountNotLinkedError = exports.OAuthCallbackError = exports.UnknownError = void 0;\n/**\n * Same as the default `Error`, but it is JSON serializable.\n * @source https://iaincollins.medium.com/error-handling-in-javascript-a6172ccdf9af\n */\nclass UnknownError extends Error {\n    constructor(error) {\n        var _a;\n        // Support passing error or string\n        super((_a = error === null || error === void 0 ? void 0 : error.message) !== null && _a !== void 0 ? _a : error);\n        this.name = \"UnknownError\";\n        this.code = error.code;\n        if (error instanceof Error) {\n            this.stack = error.stack;\n        }\n    }\n    toJSON() {\n        return {\n            name: this.name,\n            message: this.message,\n            stack: this.stack,\n        };\n    }\n}\nexports.UnknownError = UnknownError;\nclass OAuthCallbackError extends UnknownError {\n    constructor() {\n        super(...arguments);\n        this.name = \"OAuthCallbackError\";\n    }\n}\nexports.OAuthCallbackError = OAuthCallbackError;\n/**\n * Thrown when an Email address is already associated with an account\n * but the user is trying an OAuth account that is not linked to it.\n */\nclass AccountNotLinkedError extends UnknownError {\n    constructor() {\n        super(...arguments);\n        this.name = \"AccountNotLinkedError\";\n    }\n}\nexports.AccountNotLinkedError = AccountNotLinkedError;\nclass MissingAPIRoute extends UnknownError {\n    constructor() {\n        super(...arguments);\n        this.name = \"MissingAPIRouteError\";\n        this.code = \"MISSING_NEXTAUTH_API_ROUTE_ERROR\";\n    }\n}\nexports.MissingAPIRoute = MissingAPIRoute;\nclass MissingSecret extends UnknownError {\n    constructor() {\n        super(...arguments);\n        this.name = \"MissingSecretError\";\n        this.code = \"NO_SECRET\";\n    }\n}\nexports.MissingSecret = MissingSecret;\nclass MissingAuthorize extends UnknownError {\n    constructor() {\n        super(...arguments);\n        this.name = \"MissingAuthorizeError\";\n        this.code = \"CALLBACK_CREDENTIALS_HANDLER_ERROR\";\n    }\n}\nexports.MissingAuthorize = MissingAuthorize;\nclass MissingAdapter extends UnknownError {\n    constructor() {\n        super(...arguments);\n        this.name = \"MissingAdapterError\";\n        this.code = \"EMAIL_REQUIRES_ADAPTER_ERROR\";\n    }\n}\nexports.MissingAdapter = MissingAdapter;\nclass MissingAdapterMethods extends UnknownError {\n    constructor() {\n        super(...arguments);\n        this.name = \"MissingAdapterMethodsError\";\n        this.code = \"MISSING_ADAPTER_METHODS_ERROR\";\n    }\n}\nexports.MissingAdapterMethods = MissingAdapterMethods;\nclass UnsupportedStrategy extends UnknownError {\n    constructor() {\n        super(...arguments);\n        this.name = \"UnsupportedStrategyError\";\n        this.code = \"CALLBACK_CREDENTIALS_JWT_ERROR\";\n    }\n}\nexports.UnsupportedStrategy = UnsupportedStrategy;\nclass InvalidCallbackUrl extends UnknownError {\n    constructor() {\n        super(...arguments);\n        this.name = \"InvalidCallbackUrl\";\n        this.code = \"INVALID_CALLBACK_URL_ERROR\";\n    }\n}\nexports.InvalidCallbackUrl = InvalidCallbackUrl;\nclass UnknownAction extends UnknownError {\n    constructor() {\n        super(...arguments);\n        this.name = \"UnknownAction\";\n        this.code = \"UNKNOWN_ACTION_ERROR\";\n    }\n}\nexports.UnknownAction = UnknownAction;\nclass UntrustedHost extends UnknownError {\n    constructor() {\n        super(...arguments);\n        this.name = \"UntrustedHost\";\n        this.code = \"UNTRUST_HOST_ERROR\";\n    }\n}\nexports.UntrustedHost = UntrustedHost;\nfunction upperSnake(s) {\n    return s.replace(/([A-Z])/g, \"_$1\").toUpperCase();\n}\nexports.upperSnake = upperSnake;\nfunction capitalize(s) {\n    return `${s[0].toUpperCase()}${s.slice(1)}`;\n}\nexports.capitalize = capitalize;\n/**\n * Wraps an object of methods and adds error handling.\n */\nfunction eventsErrorHandler(methods, logger) {\n    return Object.keys(methods).reduce((acc, name) => {\n        acc[name] = async (...args) => {\n            try {\n                const method = methods[name];\n                return await method(...args);\n            }\n            catch (e) {\n                logger.error(`${upperSnake(name)}_EVENT_ERROR`, e);\n            }\n        };\n        return acc;\n    }, {});\n}\nexports.eventsErrorHandler = eventsErrorHandler;\n/** Handles adapter induced errors. */\nfunction adapterErrorHandler(adapter, logger) {\n    if (!adapter)\n        return;\n    return Object.keys(adapter).reduce((acc, name) => {\n        acc[name] = async (...args) => {\n            try {\n                logger.debug(`adapter_${name}`, { args });\n                const method = adapter[name];\n                return await method(...args);\n            }\n            catch (error) {\n                logger.error(`adapter_error_${name}`, error);\n                const e = new UnknownError(error);\n                e.name = `${capitalize(name)}Error`;\n                throw e;\n            }\n        };\n        return acc;\n    }, {});\n}\nexports.adapterErrorHandler = adapterErrorHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../packages/next-auth/core/errors.js\n"));

/***/ }),

/***/ "../../../packages/next-auth/react/index.js":
/*!**************************************************!*\
  !*** ../../../packages/next-auth/react/index.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("/* provided dependency */ var process = __webpack_require__(/*! process */ \"../../../node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js\");\n\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _a, _b, _c, _d, _e;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SessionProvider = exports.signOut = exports.signIn = exports.getProviders = exports.getCsrfToken = exports.getSession = exports.useSession = exports.SessionContext = void 0;\nconst jsx_runtime_1 = __webpack_require__(/*! react/jsx-runtime */ \"../../../node_modules/.pnpm/next@13.1.1_biqbaboplfbrettd7655fr4n2y/node_modules/next/dist/compiled/react/jsx-runtime.js\");\n// Note about signIn() and signOut() methods:\n//\n// On signIn() and signOut() we pass 'json: true' to request a response in JSON\n// instead of HTTP as redirect URLs on other domains are not returned to\n// requests made using the fetch API in the browser, and we need to ask the API\n// to return the response as a JSON object (the end point still defaults to\n// returning an HTTP response with a redirect for non-JavaScript clients).\n//\n// We use HTTP POST requests with CSRF Tokens to protect against CSRF attacks.\nconst React = __importStar(__webpack_require__(/*! react */ \"../../../node_modules/.pnpm/next@13.1.1_biqbaboplfbrettd7655fr4n2y/node_modules/next/dist/compiled/react/index.js\"));\nconst logger_1 = __importStar(__webpack_require__(/*! ../utils/logger */ \"../../../packages/next-auth/utils/logger.js\"));\nconst parse_url_1 = __importDefault(__webpack_require__(/*! ../utils/parse-url */ \"../../../packages/next-auth/utils/parse-url.js\"));\nconst _utils_1 = __webpack_require__(/*! ../client/_utils */ \"../../../packages/next-auth/client/_utils.js\");\n__exportStar(__webpack_require__(/*! ./types */ \"../../../packages/next-auth/react/types.js\"), exports);\n// This behaviour mirrors the default behaviour for getting the site name that\n// happens server side in server/index.js\n// 1. An empty value is legitimate when the code is being invoked client side as\n//    relative URLs are valid in that context and so defaults to empty.\n// 2. When invoked server side the value is picked up from an environment\n//    variable and defaults to 'http://localhost:3000'.\nconst __NEXTAUTH = {\n    baseUrl: (0, parse_url_1.default)((_a = process.env.NEXTAUTH_URL) !== null && _a !== void 0 ? _a : process.env.VERCEL_URL).origin,\n    basePath: (0, parse_url_1.default)(process.env.NEXTAUTH_URL).path,\n    baseUrlServer: (0, parse_url_1.default)((_c = (_b = process.env.NEXTAUTH_URL_INTERNAL) !== null && _b !== void 0 ? _b : process.env.NEXTAUTH_URL) !== null && _c !== void 0 ? _c : process.env.VERCEL_URL).origin,\n    basePathServer: (0, parse_url_1.default)((_d = process.env.NEXTAUTH_URL_INTERNAL) !== null && _d !== void 0 ? _d : process.env.NEXTAUTH_URL).path,\n    _lastSync: 0,\n    _session: undefined,\n    _getSession: () => { },\n};\nconst broadcast = (0, _utils_1.BroadcastChannel)();\nconst logger = (0, logger_1.proxyLogger)(logger_1.default, __NEXTAUTH.basePath);\nfunction useOnline() {\n    const [isOnline, setIsOnline] = React.useState(typeof navigator !== \"undefined\" ? navigator.onLine : false);\n    const setOnline = () => setIsOnline(true);\n    const setOffline = () => setIsOnline(false);\n    React.useEffect(() => {\n        window.addEventListener(\"online\", setOnline);\n        window.addEventListener(\"offline\", setOffline);\n        return () => {\n            window.removeEventListener(\"online\", setOnline);\n            window.removeEventListener(\"offline\", setOffline);\n        };\n    }, []);\n    return isOnline;\n}\nexports.SessionContext = (_e = React.createContext) === null || _e === void 0 ? void 0 : _e.call(React, undefined);\n/**\n * React Hook that gives you access\n * to the logged in user's session data.\n *\n * [Documentation](https://next-auth.js.org/getting-started/client#usesession)\n */\nfunction useSession(options) {\n    if (!exports.SessionContext) {\n        throw new Error(\"React Context is unavailable in Server Components\");\n    }\n    // @ts-expect-error Satisfy TS if branch on line below\n    const value = React.useContext(exports.SessionContext);\n    if (!value && \"development\" !== \"production\") {\n        throw new Error(\"[next-auth]: `useSession` must be wrapped in a <SessionProvider />\");\n    }\n    const { required, onUnauthenticated } = options !== null && options !== void 0 ? options : {};\n    const requiredAndNotLoading = required && value.status === \"unauthenticated\";\n    React.useEffect(() => {\n        if (requiredAndNotLoading) {\n            const url = `/api/auth/signin?${new URLSearchParams({\n                error: \"SessionRequired\",\n                callbackUrl: window.location.href,\n            })}`;\n            if (onUnauthenticated)\n                onUnauthenticated();\n            else\n                window.location.href = url;\n        }\n    }, [requiredAndNotLoading, onUnauthenticated]);\n    if (requiredAndNotLoading) {\n        return { data: value.data, status: \"loading\" };\n    }\n    return value;\n}\nexports.useSession = useSession;\nasync function getSession(params) {\n    var _a;\n    const session = await (0, _utils_1.fetchData)(\"session\", __NEXTAUTH, logger, params);\n    if ((_a = params === null || params === void 0 ? void 0 : params.broadcast) !== null && _a !== void 0 ? _a : true) {\n        broadcast.post({ event: \"session\", data: { trigger: \"getSession\" } });\n    }\n    return session;\n}\nexports.getSession = getSession;\n/**\n * Returns the current Cross Site Request Forgery Token (CSRF Token)\n * required to make POST requests (e.g. for signing in and signing out).\n * You likely only need to use this if you are not using the built-in\n * `signIn()` and `signOut()` methods.\n *\n * [Documentation](https://next-auth.js.org/getting-started/client#getcsrftoken)\n */\nasync function getCsrfToken(params) {\n    const response = await (0, _utils_1.fetchData)(\"csrf\", __NEXTAUTH, logger, params);\n    return response === null || response === void 0 ? void 0 : response.csrfToken;\n}\nexports.getCsrfToken = getCsrfToken;\n/**\n * It calls `/api/auth/providers` and returns\n * a list of the currently configured authentication providers.\n * It can be useful if you are creating a dynamic custom sign in page.\n *\n * [Documentation](https://next-auth.js.org/getting-started/client#getproviders)\n */\nasync function getProviders() {\n    return await (0, _utils_1.fetchData)(\"providers\", __NEXTAUTH, logger);\n}\nexports.getProviders = getProviders;\n/**\n * Client-side method to initiate a signin flow\n * or send the user to the signin page listing all possible providers.\n * Automatically adds the CSRF token to the request.\n *\n * [Documentation](https://next-auth.js.org/getting-started/client#signin)\n */\nasync function signIn(provider, options, authorizationParams) {\n    var _a;\n    const { callbackUrl = window.location.href, redirect = true, signinInfo } = options !== null && options !== void 0 ? options : {};\n    const baseUrl = (0, _utils_1.apiBaseUrl)(__NEXTAUTH);\n    const providers = await getProviders();\n    if (!providers) {\n        window.location.href = `${baseUrl}/error`;\n        return;\n    }\n    if (!provider || !(provider in providers)) {\n        window.location.href = `${baseUrl}/signin?${new URLSearchParams({\n            callbackUrl,\n        })}`;\n        return;\n    }\n    const isCredentials = providers[provider].type === \"credentials\";\n    const isEmail = providers[provider].type === \"email\";\n    const isSupportingReturn = isCredentials || isEmail;\n    const signInUrl = `${baseUrl}/${isCredentials ? \"callback\" : \"signin\"}/${provider}`;\n    const _signInUrl = `${signInUrl}?${new URLSearchParams(authorizationParams)}`;\n    const res = await fetch(_signInUrl, {\n        method: \"post\",\n        headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            \"X-Auth-Return-Redirect\": \"1\",\n        },\n        // @ts-expect-error\n        body: new URLSearchParams({\n            ...options,\n            csrfToken: await getCsrfToken(),\n            callbackUrl,\n            signinInfo: signinInfo === undefined ? undefined : encodeURIComponent(signinInfo)\n        }),\n    });\n    const data = await res.json();\n    // TODO: Do not redirect for Credentials and Email providers by default in next major\n    if (redirect || !isSupportingReturn) {\n        const url = (_a = data.url) !== null && _a !== void 0 ? _a : callbackUrl;\n        window.location.href = url;\n        // If url contains a hash, the browser does not reload the page. We reload manually\n        if (url.includes(\"#\"))\n            window.location.reload();\n        return;\n    }\n    const error = new URL(data.url).searchParams.get(\"error\");\n    if (res.ok) {\n        await __NEXTAUTH._getSession({ event: \"storage\" });\n    }\n    return {\n        error,\n        status: res.status,\n        ok: res.ok,\n        url: error ? null : data.url,\n    };\n}\nexports.signIn = signIn;\n/**\n * Signs the user out, by removing the session cookie.\n * Automatically adds the CSRF token to the request.\n *\n * [Documentation](https://next-auth.js.org/getting-started/client#signout)\n */\nasync function signOut(options) {\n    var _a, _b, _c;\n    const { callbackUrl = window.location.href } = options !== null && options !== void 0 ? options : {};\n    const baseUrl = (0, _utils_1.apiBaseUrl)(__NEXTAUTH);\n    const fetchOptions = {\n        method: \"post\",\n        headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            \"X-Auth-Return-Redirect\": \"1\",\n        },\n        body: new URLSearchParams({\n            csrfToken: (_a = (await getCsrfToken())) !== null && _a !== void 0 ? _a : \"\",\n            callbackUrl,\n        }),\n    };\n    const res = await fetch(`${baseUrl}/signout`, fetchOptions);\n    const data = await res.json();\n    broadcast.post({ event: \"session\", data: { trigger: \"signout\" } });\n    if ((_b = options === null || options === void 0 ? void 0 : options.redirect) !== null && _b !== void 0 ? _b : true) {\n        const url = (_c = data.url) !== null && _c !== void 0 ? _c : callbackUrl;\n        window.location.href = url;\n        // If url contains a hash, the browser does not reload the page. We reload manually\n        if (url.includes(\"#\"))\n            window.location.reload();\n        // @ts-expect-error\n        return;\n    }\n    await __NEXTAUTH._getSession({ event: \"storage\" });\n    return data;\n}\nexports.signOut = signOut;\n/**\n * Provider to wrap the app in to make session data available globally.\n * Can also be used to throttle the number of requests to the endpoint\n * `/api/auth/session`.\n *\n * [Documentation](https://next-auth.js.org/getting-started/client#sessionprovider)\n */\nfunction SessionProvider(props) {\n    if (!exports.SessionContext) {\n        throw new Error(\"React Context is unavailable in Server Components\");\n    }\n    const { children, basePath, refetchInterval, refetchWhenOffline } = props;\n    if (basePath)\n        __NEXTAUTH.basePath = basePath;\n    /**\n     * If session was `null`, there was an attempt to fetch it,\n     * but it failed, but we still treat it as a valid initial value.\n     */\n    const hasInitialSession = props.session !== undefined;\n    /** If session was passed, initialize as already synced */\n    __NEXTAUTH._lastSync = hasInitialSession ? (0, _utils_1.now)() : 0;\n    const [session, setSession] = React.useState(() => {\n        if (hasInitialSession)\n            __NEXTAUTH._session = props.session;\n        return props.session;\n    });\n    /** If session was passed, initialize as not loading */\n    const [loading, setLoading] = React.useState(!hasInitialSession);\n    React.useEffect(() => {\n        __NEXTAUTH._getSession = async ({ event } = {}) => {\n            try {\n                const storageEvent = event === \"storage\";\n                // We should always update if we don't have a client session yet\n                // or if there are events from other tabs/windows\n                if (storageEvent || __NEXTAUTH._session === undefined) {\n                    __NEXTAUTH._lastSync = (0, _utils_1.now)();\n                    __NEXTAUTH._session = await getSession({\n                        broadcast: !storageEvent,\n                    });\n                    setSession(__NEXTAUTH._session);\n                    return;\n                }\n                if (\n                // If there is no time defined for when a session should be considered\n                // stale, then it's okay to use the value we have until an event is\n                // triggered which updates it\n                !event ||\n                    // If the client doesn't have a session then we don't need to call\n                    // the server to check if it does (if they have signed in via another\n                    // tab or window that will come through as a \"stroage\" event\n                    // event anyway)\n                    __NEXTAUTH._session === null ||\n                    // Bail out early if the client session is not stale yet\n                    (0, _utils_1.now)() < __NEXTAUTH._lastSync) {\n                    return;\n                }\n                // An event or session staleness occurred, update the client session.\n                __NEXTAUTH._lastSync = (0, _utils_1.now)();\n                __NEXTAUTH._session = await getSession();\n                setSession(__NEXTAUTH._session);\n            }\n            catch (error) {\n                logger.error(\"CLIENT_SESSION_ERROR\", error);\n            }\n            finally {\n                setLoading(false);\n            }\n        };\n        __NEXTAUTH._getSession();\n        return () => {\n            __NEXTAUTH._lastSync = 0;\n            __NEXTAUTH._session = undefined;\n            __NEXTAUTH._getSession = () => { };\n        };\n    }, []);\n    React.useEffect(() => {\n        // Listen for storage events and update session if event fired from\n        // another window (but suppress firing another event to avoid a loop)\n        // Fetch new session data but tell it to not to fire another event to\n        // avoid an infinite loop.\n        // Note: We could pass session data through and do something like\n        // `setData(message.data)` but that can cause problems depending\n        // on how the session object is being used in the client; it is\n        // more robust to have each window/tab fetch it's own copy of the\n        // session object rather than share it across instances.\n        const unsubscribe = broadcast.receive(() => __NEXTAUTH._getSession({ event: \"storage\" }));\n        return () => unsubscribe();\n    }, []);\n    React.useEffect(() => {\n        const { refetchOnWindowFocus = true } = props;\n        // Listen for when the page is visible, if the user switches tabs\n        // and makes our tab visible again, re-fetch the session, but only if\n        // this feature is not disabled.\n        const visibilityHandler = () => {\n            if (refetchOnWindowFocus && document.visibilityState === \"visible\")\n                __NEXTAUTH._getSession({ event: \"visibilitychange\" });\n        };\n        document.addEventListener(\"visibilitychange\", visibilityHandler, false);\n        return () => document.removeEventListener(\"visibilitychange\", visibilityHandler, false);\n    }, [props.refetchOnWindowFocus]);\n    const isOnline = useOnline();\n    // TODO: Flip this behavior in next major version\n    const shouldRefetch = refetchWhenOffline !== false || isOnline;\n    React.useEffect(() => {\n        if (refetchInterval && shouldRefetch) {\n            const refetchIntervalTimer = setInterval(() => {\n                if (__NEXTAUTH._session) {\n                    __NEXTAUTH._getSession({ event: \"poll\" });\n                }\n            }, refetchInterval * 1000);\n            return () => clearInterval(refetchIntervalTimer);\n        }\n    }, [refetchInterval, shouldRefetch]);\n    const value = React.useMemo(() => ({\n        data: session,\n        status: loading\n            ? \"loading\"\n            : session\n                ? \"authenticated\"\n                : \"unauthenticated\",\n    }), [session, loading]);\n    return ((0, jsx_runtime_1.jsx)(exports.SessionContext.Provider, { value: value, children: children }));\n}\nexports.SessionProvider = SessionProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../packages/next-auth/react/index.js\n"));

/***/ }),

/***/ "../../../packages/next-auth/react/types.js":
/*!**************************************************!*\
  !*** ../../../packages/next-auth/react/types.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vcGFja2FnZXMvbmV4dC1hdXRoL3JlYWN0L3R5cGVzLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi8uLi8uLi9wYWNrYWdlcy9uZXh0LWF1dGgvcmVhY3QvdHlwZXMuanM/NjU3OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../../packages/next-auth/react/types.js\n"));

/***/ }),

/***/ "../../../packages/next-auth/utils/logger.js":
/*!***************************************************!*\
  !*** ../../../packages/next-auth/utils/logger.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.proxyLogger = exports.setLogger = void 0;\nconst errors_1 = __webpack_require__(/*! ../core/errors */ \"../../../packages/next-auth/core/errors.js\");\n// TODO: better typing\n/** Makes sure that error is always serializable */\nfunction formatError(o) {\n    var _a;\n    if (o instanceof Error && !(o instanceof errors_1.UnknownError)) {\n        return { message: o.message, stack: o.stack, name: o.name };\n    }\n    if (hasErrorProperty(o)) {\n        o.error = formatError(o.error);\n        o.message = (_a = o.message) !== null && _a !== void 0 ? _a : o.error.message;\n    }\n    return o;\n}\nfunction hasErrorProperty(x) {\n    return !!(x === null || x === void 0 ? void 0 : x.error);\n}\nconst _logger = {\n    error(code, metadata) {\n        metadata = formatError(metadata);\n        console.error(`[next-auth][error][${code}]`, `\\nhttps://next-auth.js.org/errors#${code.toLowerCase()}`, metadata.message, metadata);\n    },\n    warn(code) {\n        console.warn(`[next-auth][warn][${code}]`, `\\nhttps://next-auth.js.org/warnings#${code.toLowerCase()}`);\n    },\n    debug(code, metadata) {\n        console.log(`[next-auth][debug][${code}]`, metadata);\n    },\n};\n/**\n * Override the built-in logger with user's implementation.\n * Any `undefined` level will use the default logger.\n */\nfunction setLogger(newLogger = {}, debug) {\n    // Turn off debug logging if `debug` isn't set to `true`\n    if (!debug)\n        _logger.debug = () => { };\n    if (newLogger.error)\n        _logger.error = newLogger.error;\n    if (newLogger.warn)\n        _logger.warn = newLogger.warn;\n    if (newLogger.debug)\n        _logger.debug = newLogger.debug;\n}\nexports.setLogger = setLogger;\nexports[\"default\"] = _logger;\n/** Serializes client-side log messages and sends them to the server */\nfunction proxyLogger(logger = _logger, basePath) {\n    try {\n        if (typeof window === \"undefined\") {\n            return logger;\n        }\n        const clientLogger = {};\n        for (const level in logger) {\n            clientLogger[level] = (code, metadata) => {\n                _logger[level](code, metadata); // Logs to console\n                if (level === \"error\") {\n                    metadata = formatError(metadata);\n                }\n                ;\n                metadata.client = true;\n                const url = `${basePath}/_log`;\n                const body = new URLSearchParams({ level, code, ...metadata });\n                if (navigator.sendBeacon) {\n                    return navigator.sendBeacon(url, body);\n                }\n                return fetch(url, { method: \"POST\", body, keepalive: true });\n            };\n        }\n        return clientLogger;\n    }\n    catch {\n        return _logger;\n    }\n}\nexports.proxyLogger = proxyLogger;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vcGFja2FnZXMvbmV4dC1hdXRoL3V0aWxzL2xvZ2dlci5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUIsR0FBRyxpQkFBaUI7QUFDdkMsaUJBQWlCLG1CQUFPLENBQUMsa0VBQWdCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsS0FBSyx5Q0FBeUMsbUJBQW1CO0FBQzdHLEtBQUs7QUFDTDtBQUNBLDBDQUEwQyxLQUFLLDJDQUEyQyxtQkFBbUI7QUFDN0csS0FBSztBQUNMO0FBQ0EsMENBQTBDLEtBQUs7QUFDL0MsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsa0JBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixTQUFTO0FBQ3hDLG1EQUFtRCwwQkFBMEI7QUFDN0U7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLHVDQUF1QztBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi8uLi8uLi9wYWNrYWdlcy9uZXh0LWF1dGgvdXRpbHMvbG9nZ2VyLmpzPzhjNjQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnByb3h5TG9nZ2VyID0gZXhwb3J0cy5zZXRMb2dnZXIgPSB2b2lkIDA7XG5jb25zdCBlcnJvcnNfMSA9IHJlcXVpcmUoXCIuLi9jb3JlL2Vycm9yc1wiKTtcbi8vIFRPRE86IGJldHRlciB0eXBpbmdcbi8qKiBNYWtlcyBzdXJlIHRoYXQgZXJyb3IgaXMgYWx3YXlzIHNlcmlhbGl6YWJsZSAqL1xuZnVuY3Rpb24gZm9ybWF0RXJyb3Iobykge1xuICAgIHZhciBfYTtcbiAgICBpZiAobyBpbnN0YW5jZW9mIEVycm9yICYmICEobyBpbnN0YW5jZW9mIGVycm9yc18xLlVua25vd25FcnJvcikpIHtcbiAgICAgICAgcmV0dXJuIHsgbWVzc2FnZTogby5tZXNzYWdlLCBzdGFjazogby5zdGFjaywgbmFtZTogby5uYW1lIH07XG4gICAgfVxuICAgIGlmIChoYXNFcnJvclByb3BlcnR5KG8pKSB7XG4gICAgICAgIG8uZXJyb3IgPSBmb3JtYXRFcnJvcihvLmVycm9yKTtcbiAgICAgICAgby5tZXNzYWdlID0gKF9hID0gby5tZXNzYWdlKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBvLmVycm9yLm1lc3NhZ2U7XG4gICAgfVxuICAgIHJldHVybiBvO1xufVxuZnVuY3Rpb24gaGFzRXJyb3JQcm9wZXJ0eSh4KSB7XG4gICAgcmV0dXJuICEhKHggPT09IG51bGwgfHwgeCA9PT0gdm9pZCAwID8gdm9pZCAwIDogeC5lcnJvcik7XG59XG5jb25zdCBfbG9nZ2VyID0ge1xuICAgIGVycm9yKGNvZGUsIG1ldGFkYXRhKSB7XG4gICAgICAgIG1ldGFkYXRhID0gZm9ybWF0RXJyb3IobWV0YWRhdGEpO1xuICAgICAgICBjb25zb2xlLmVycm9yKGBbbmV4dC1hdXRoXVtlcnJvcl1bJHtjb2RlfV1gLCBgXFxuaHR0cHM6Ly9uZXh0LWF1dGguanMub3JnL2Vycm9ycyMke2NvZGUudG9Mb3dlckNhc2UoKX1gLCBtZXRhZGF0YS5tZXNzYWdlLCBtZXRhZGF0YSk7XG4gICAgfSxcbiAgICB3YXJuKGNvZGUpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGBbbmV4dC1hdXRoXVt3YXJuXVske2NvZGV9XWAsIGBcXG5odHRwczovL25leHQtYXV0aC5qcy5vcmcvd2FybmluZ3MjJHtjb2RlLnRvTG93ZXJDYXNlKCl9YCk7XG4gICAgfSxcbiAgICBkZWJ1Zyhjb2RlLCBtZXRhZGF0YSkge1xuICAgICAgICBjb25zb2xlLmxvZyhgW25leHQtYXV0aF1bZGVidWddWyR7Y29kZX1dYCwgbWV0YWRhdGEpO1xuICAgIH0sXG59O1xuLyoqXG4gKiBPdmVycmlkZSB0aGUgYnVpbHQtaW4gbG9nZ2VyIHdpdGggdXNlcidzIGltcGxlbWVudGF0aW9uLlxuICogQW55IGB1bmRlZmluZWRgIGxldmVsIHdpbGwgdXNlIHRoZSBkZWZhdWx0IGxvZ2dlci5cbiAqL1xuZnVuY3Rpb24gc2V0TG9nZ2VyKG5ld0xvZ2dlciA9IHt9LCBkZWJ1Zykge1xuICAgIC8vIFR1cm4gb2ZmIGRlYnVnIGxvZ2dpbmcgaWYgYGRlYnVnYCBpc24ndCBzZXQgdG8gYHRydWVgXG4gICAgaWYgKCFkZWJ1ZylcbiAgICAgICAgX2xvZ2dlci5kZWJ1ZyA9ICgpID0+IHsgfTtcbiAgICBpZiAobmV3TG9nZ2VyLmVycm9yKVxuICAgICAgICBfbG9nZ2VyLmVycm9yID0gbmV3TG9nZ2VyLmVycm9yO1xuICAgIGlmIChuZXdMb2dnZXIud2FybilcbiAgICAgICAgX2xvZ2dlci53YXJuID0gbmV3TG9nZ2VyLndhcm47XG4gICAgaWYgKG5ld0xvZ2dlci5kZWJ1ZylcbiAgICAgICAgX2xvZ2dlci5kZWJ1ZyA9IG5ld0xvZ2dlci5kZWJ1Zztcbn1cbmV4cG9ydHMuc2V0TG9nZ2VyID0gc2V0TG9nZ2VyO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2xvZ2dlcjtcbi8qKiBTZXJpYWxpemVzIGNsaWVudC1zaWRlIGxvZyBtZXNzYWdlcyBhbmQgc2VuZHMgdGhlbSB0byB0aGUgc2VydmVyICovXG5mdW5jdGlvbiBwcm94eUxvZ2dlcihsb2dnZXIgPSBfbG9nZ2VyLCBiYXNlUGF0aCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9nZ2VyO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNsaWVudExvZ2dlciA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGxldmVsIGluIGxvZ2dlcikge1xuICAgICAgICAgICAgY2xpZW50TG9nZ2VyW2xldmVsXSA9IChjb2RlLCBtZXRhZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIF9sb2dnZXJbbGV2ZWxdKGNvZGUsIG1ldGFkYXRhKTsgLy8gTG9ncyB0byBjb25zb2xlXG4gICAgICAgICAgICAgICAgaWYgKGxldmVsID09PSBcImVycm9yXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGEgPSBmb3JtYXRFcnJvcihtZXRhZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICBtZXRhZGF0YS5jbGllbnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnN0IHVybCA9IGAke2Jhc2VQYXRofS9fbG9nYDtcbiAgICAgICAgICAgICAgICBjb25zdCBib2R5ID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh7IGxldmVsLCBjb2RlLCAuLi5tZXRhZGF0YSB9KTtcbiAgICAgICAgICAgICAgICBpZiAobmF2aWdhdG9yLnNlbmRCZWFjb24pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5hdmlnYXRvci5zZW5kQmVhY29uKHVybCwgYm9keSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmZXRjaCh1cmwsIHsgbWV0aG9kOiBcIlBPU1RcIiwgYm9keSwga2VlcGFsaXZlOiB0cnVlIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2xpZW50TG9nZ2VyO1xuICAgIH1cbiAgICBjYXRjaCB7XG4gICAgICAgIHJldHVybiBfbG9nZ2VyO1xuICAgIH1cbn1cbmV4cG9ydHMucHJveHlMb2dnZXIgPSBwcm94eUxvZ2dlcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../../packages/next-auth/utils/logger.js\n"));

/***/ }),

/***/ "../../../packages/next-auth/utils/parse-url.js":
/*!******************************************************!*\
  !*** ../../../packages/next-auth/utils/parse-url.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/**\n * TODO: Can we remove this?\n * Returns an `URL` like object to make requests/redirects from server-side\n */\nfunction parseUrl(url) {\n    const defaultUrl = new URL(\"http://localhost:3000/api/auth\");\n    if (url && !url.toString().startsWith(\"http\")) {\n        url = `https://${url}`;\n    }\n    const _url = new URL(url !== null && url !== void 0 ? url : defaultUrl);\n    const path = (_url.pathname === \"/\" ? defaultUrl.pathname : _url.pathname)\n        // Remove trailing slash\n        .replace(/\\/$/, \"\");\n    const base = `${_url.origin}${path}`;\n    return {\n        origin: _url.origin,\n        host: _url.host,\n        path,\n        base,\n        toString: () => base,\n    };\n}\nexports[\"default\"] = parseUrl;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vcGFja2FnZXMvbmV4dC1hdXRoL3V0aWxzL3BhcnNlLXVybC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixJQUFJO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsWUFBWSxFQUFFLEtBQUs7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi8uLi8uLi9wYWNrYWdlcy9uZXh0LWF1dGgvdXRpbHMvcGFyc2UtdXJsLmpzP2E2NDciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIFRPRE86IENhbiB3ZSByZW1vdmUgdGhpcz9cbiAqIFJldHVybnMgYW4gYFVSTGAgbGlrZSBvYmplY3QgdG8gbWFrZSByZXF1ZXN0cy9yZWRpcmVjdHMgZnJvbSBzZXJ2ZXItc2lkZVxuICovXG5mdW5jdGlvbiBwYXJzZVVybCh1cmwpIHtcbiAgICBjb25zdCBkZWZhdWx0VXJsID0gbmV3IFVSTChcImh0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9hcGkvYXV0aFwiKTtcbiAgICBpZiAodXJsICYmICF1cmwudG9TdHJpbmcoKS5zdGFydHNXaXRoKFwiaHR0cFwiKSkge1xuICAgICAgICB1cmwgPSBgaHR0cHM6Ly8ke3VybH1gO1xuICAgIH1cbiAgICBjb25zdCBfdXJsID0gbmV3IFVSTCh1cmwgIT09IG51bGwgJiYgdXJsICE9PSB2b2lkIDAgPyB1cmwgOiBkZWZhdWx0VXJsKTtcbiAgICBjb25zdCBwYXRoID0gKF91cmwucGF0aG5hbWUgPT09IFwiL1wiID8gZGVmYXVsdFVybC5wYXRobmFtZSA6IF91cmwucGF0aG5hbWUpXG4gICAgICAgIC8vIFJlbW92ZSB0cmFpbGluZyBzbGFzaFxuICAgICAgICAucmVwbGFjZSgvXFwvJC8sIFwiXCIpO1xuICAgIGNvbnN0IGJhc2UgPSBgJHtfdXJsLm9yaWdpbn0ke3BhdGh9YDtcbiAgICByZXR1cm4ge1xuICAgICAgICBvcmlnaW46IF91cmwub3JpZ2luLFxuICAgICAgICBob3N0OiBfdXJsLmhvc3QsXG4gICAgICAgIHBhdGgsXG4gICAgICAgIGJhc2UsXG4gICAgICAgIHRvU3RyaW5nOiAoKSA9PiBiYXNlLFxuICAgIH07XG59XG5leHBvcnRzLmRlZmF1bHQgPSBwYXJzZVVybDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../../packages/next-auth/utils/parse-url.js\n"));

/***/ })

});